{
  "cells": [
    {
      "cell_type": "markdown",
      "id": "fe2803a7",
      "metadata": {
        "id": "fe2803a7"
      },
      "source": [
        "# 111254003 社會碩一 呂修齊 第四次作業\n",
        "\n",
        "### 上課老師講到了基因演算法，在本專案中，我嘗試模擬了一次基因演算法，並用電腦模擬的方式來探討該演算法特性\n",
        "\n",
        "### 參數\n",
        "#### n=基因母體數 n_chromosomess=基因數列長度 crossover_rate=每對伴侶有生殖的機率 mutate_rate=變異機率\n",
        "\n",
        "##### 方法：\n",
        "##### 1.創建n個基因，每個基因有n_chromosomess個以1或0為序列的染色體。 fitness計算為單純加起來，希望可以找到最大fitness，也就是全為1的序列。\n",
        "##### 2. 挑選伴侶，用基因篩選，將我們的基因隨機每三個人分成一隊，三個人裡面挑選fitness最高的二人\n",
        "#####  3. 每對情侶給一個隨機機率，小於crossover_rate便會交配產生兩個後代。後代產生方式為隨機找一個截點，將雙親的染色體分成個部分，並串接成兩個後代，接著，每個基因都有極小機率變異。接著重複此不重(樣本會越來越少，大概一少1/3)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "58171537",
      "metadata": {
        "id": "58171537"
      },
      "outputs": [],
      "source": [
        "%matplotlib inline\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import numpy as np\n",
        "import random"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "90cdffcf",
      "metadata": {
        "id": "90cdffcf"
      },
      "outputs": [],
      "source": [
        "class genetic_algorism():\n",
        "    def __init__(self,n,n_chromosomess,crossover_rate, mutate_rate):\n",
        "        # creat the genes randomly，each agent has ten genes，represented by 1 and 0\n",
        "        # we asuume eack chromosomess has 1000 genes\n",
        "        self.n_chromosomess=n_chromosomess\n",
        "        self.chromosomess=np.random.choice([0,1],(n,n_chromosomess))\n",
        "        #initial fitness, startingg by 0\n",
        "        self.fitness=np.full((n,),0)\n",
        "        self.crossover_rate=crossover_rate\n",
        "        self.mutate_rate=mutate_rate\n",
        "    \n",
        "    def cacluate_fitness(self):\n",
        "        '''\n",
        "        Since it's a simple simulation, the fitness just sum all the bits,to find the target。\n",
        "        '''\n",
        "        self.fitness=np.array(list(map(lambda x: sum(x),self.chromosomess)))\n",
        "    def select_parents(self):\n",
        "        '''\n",
        "        we randomly seperate the population into groups,and each group contains 3 agents.\n",
        "        \n",
        "        the two with the highest fitness can become parents\n",
        "        '''\n",
        "        chromosomess=self.chromosomess\n",
        "        fitness=self.fitness\n",
        "        index=random.sample(range(0,len(chromosomess)),len(chromosomess))\n",
        "        groups=list((zip(*[iter(index)]*3)))\n",
        "        top_two_values=list(map(lambda x:np.argsort(fitness[np.array(x)])[1:3],groups))\n",
        "        parents= np.array([np.array(groups[i])[top_two_values[i]] for i in range(0,len(groups))])\n",
        "       \n",
        "        return parents\n",
        "    def mutate(self,offspring):\n",
        "        mutate_or_not=np.random.random(len(offspring))<self.mutate_rate\n",
        "        offspring[mutate_or_not]=1-offspring[mutate_or_not]\n",
        "\n",
        "        return offspring\n",
        "    def crossover_and_mutate(self):\n",
        "        \"\"\"\n",
        "        each parents has the probaility of crossover_rate to mate, and make 2 offsprings each pair.\n",
        "        \"\"\"\n",
        "        chromosomess=self.chromosomess\n",
        "        parents=self.select_parents()\n",
        "        offsprings=[]\n",
        "        for pair in parents:\n",
        "            couple=chromosomess[pair]\n",
        "            # deicide crossover or nor\n",
        "            p=np.random.random()\n",
        "            if p< self.crossover_rate:\n",
        "                # select the cut point\n",
        "                cut_point=np.random.choice(range(0,self.n_chromosomess),1)\n",
        "\n",
        "                parent1_1=couple[0][0:cut_point[0]]\n",
        "                parent1_2=couple[0][cut_point[0]:len(couple[0])]\n",
        "                parent2_1=couple[1][0:cut_point[0]]\n",
        "                parent2_2=couple[1][cut_point[0]:len(couple[1])]\n",
        "                offspring1=np.concatenate((parent1_1, parent2_2))\n",
        "                offspring2=np.concatenate((parent2_1, parent1_2))\n",
        "                mutate_or_not=np.random.random(len(offspring1))<self.mutate_rate\n",
        "                offspring1=self.mutate(offspring=offspring1)\n",
        "                offspring2=self.mutate(offspring=offspring2)\n",
        "                offsprings+=[offspring1,offspring2]\n",
        "                \n",
        "        return offsprings\n",
        "    def step(self):\n",
        "        '''\n",
        "        each step means one evolution\n",
        "        '''\n",
        "        #caculuat the fitness\n",
        "        self.cacluate_fitness()\n",
        "        \n",
        "        # make the offspring\n",
        "        offsprings=self.crossover_and_mutate()\n",
        "        \n",
        "        #generation change\n",
        "        \n",
        "        self.chromosomess=np.array(offsprings)\n",
        "        \n",
        "    \n",
        "\n",
        "        \n",
        "    "
      ]
    },
    {
      "cell_type": "markdown",
      "id": "38a8dd05",
      "metadata": {
        "id": "38a8dd05"
      },
      "source": [
        "##  接著，開始模擬看模擬結果"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "0703eea7",
      "metadata": {
        "id": "0703eea7"
      },
      "outputs": [],
      "source": [
        "# 畫圖相關語法\n",
        "def decorate(**options):\n",
        "    \"\"\"Decorate the current axes.\n",
        "\n",
        "    Call decorate with keyword arguments like\n",
        "\n",
        "    decorate(title='Title',\n",
        "             xlabel='x',\n",
        "             ylabel='y')\n",
        "\n",
        "    The keyword arguments can be any of the axis properties\n",
        "\n",
        "    https://matplotlib.org/api/axes_api.html\n",
        "\n",
        "    In addition, you can use `legend=False` to suppress the legend.\n",
        "\n",
        "    And you can use `loc` to indicate the location of the legend\n",
        "    (the default value is 'best')\n",
        "    \"\"\"\n",
        "    loc = options.pop(\"loc\", \"best\")\n",
        "    if options.pop(\"legend\", True):\n",
        "        legend(loc=loc)\n",
        "\n",
        "    plt.gca().set(**options)\n",
        "    plt.tight_layout()\n",
        "\n",
        "\n",
        "def legend(**options):\n",
        "    \"\"\"Draws a legend only if there is at least one labeled item.\n",
        "\n",
        "    options are passed to plt.legend()\n",
        "    https://matplotlib.org/api/_as_gen/matplotlib.pyplot.legend.html\n",
        "\n",
        "    \"\"\"\n",
        "    underride(options, loc=\"best\", frameon=False)\n",
        "\n",
        "    ax = plt.gca()\n",
        "    handles, labels = ax.get_legend_handles_labels()\n",
        "    if handles:\n",
        "        ax.legend(handles, labels, **options)\n",
        "\n",
        "\n",
        "def set_palette(*args, **kwds):\n",
        "    \"\"\"Set the matplotlib color cycler.\n",
        "\n",
        "    args, kwds: same as for sns.color_palette\n",
        "\n",
        "    Also takes a boolean kwd, `reverse`, to indicate\n",
        "    whether the order of the palette should be reversed.\n",
        "\n",
        "    returns: list of colors\n",
        "    \"\"\"\n",
        "    reverse = kwds.pop('reverse', False)\n",
        "    palette = sns.color_palette(*args, **kwds)\n",
        "\n",
        "    palette = list(palette)\n",
        "    if reverse:\n",
        "        palette.reverse()\n",
        "\n",
        "    cycler = plt.cycler(color=palette)\n",
        "    plt.gca().set_prop_cycle(cycler)\n",
        "    return palette\n",
        "def underride(d, **options):\n",
        "    \"\"\"Add key-value pairs to d only if key is not in d.\n",
        "\n",
        "    d: dictionary\n",
        "    options: keyword args to add to d\n",
        "    \"\"\"\n",
        "    for key, val in options.items():\n",
        "        d.setdefault(key, val)\n",
        "\n",
        "    return d"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "228b41c2",
      "metadata": {
        "id": "228b41c2"
      },
      "source": [
        "## 模擬開始，為了可以疊代多次，n設30000,n_chromosomess設20，交配率0.95,變異率0.02"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "8b62272f",
      "metadata": {
        "id": "8b62272f"
      },
      "outputs": [],
      "source": [
        "ge=genetic_algorism(n=30000,n_chromosomess=20,crossover_rate=0.95,mutate_rate=0.02)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ae1e01de",
      "metadata": {
        "id": "ae1e01de",
        "outputId": "079da091-21f8-4da4-bf05-ce39a48e1eb8"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "30000\n",
            "19036\n",
            "12084\n",
            "7642\n",
            "4838\n",
            "3058\n",
            "1952\n",
            "1236\n",
            "784\n",
            "504\n",
            "318\n"
          ]
        }
      ],
      "source": [
        "times=range(0,11)\n",
        "max_fitness=[]\n",
        "min_fitness=[]\n",
        "average_fitness=[]\n",
        "for i in times:\n",
        "    ge.step()\n",
        "    print(len(ge.fitness))\n",
        "    max_fitness.append(max(ge.fitness))\n",
        "    min_fitness.append(min(ge.fitness))\n",
        "    average_fitness.append(np.mean(ge.fitness))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "dc2fdba3",
      "metadata": {
        "id": "dc2fdba3",
        "outputId": "aa41d4af-0b4f-40a2-851f-5c9f3368db84"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "\n",
        "plt.plot(times, max_fitness, 's-', linewidth=1, label='max(fitness)')\n",
        "plt.plot(times, min_fitness, 's-', linewidth=1, label='min(fitness)')\n",
        "plt.plot(times, average_fitness, 's-', linewidth=1, label='meann(fitness)')\n",
        "\n",
        "decorate(xlabel='step_time',\n",
        "         ylabel='fitness',\n",
        "         xlim=[0, 10], ylim=[0, 20])\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "7f2e3a37",
      "metadata": {
        "id": "7f2e3a37"
      },
      "source": [
        "### 接著，看如果將n跟n_chromosomess都調更大"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "f3b8e764",
      "metadata": {
        "id": "f3b8e764"
      },
      "outputs": [],
      "source": [
        "ge=genetic_algorism(n=1000000,n_chromosomess=40,crossover_rate=0.95,mutate_rate=0.02)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "c46deab2",
      "metadata": {
        "id": "c46deab2",
        "outputId": "a49de5e2-8f49-40e2-c381-ba999d30cf83"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "1000000\n",
            "633730\n",
            "401630\n",
            "254308\n",
            "161362\n",
            "102160\n",
            "64794\n",
            "41092\n",
            "26024\n",
            "16406\n",
            "10450\n",
            "6604\n",
            "4190\n",
            "2674\n",
            "1692\n",
            "1074\n",
            "670\n",
            "432\n",
            "272\n",
            "174\n"
          ]
        }
      ],
      "source": [
        "times=range(0,20)\n",
        "max_fitness=[]\n",
        "min_fitness=[]\n",
        "average_fitness=[]\n",
        "for i in times:\n",
        "    ge.step()\n",
        "    print(len(ge.fitness))\n",
        "    max_fitness.append(max(ge.fitness))\n",
        "    min_fitness.append(min(ge.fitness))\n",
        "    average_fitness.append(np.mean(ge.fitness))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "46cb4b21",
      "metadata": {
        "id": "46cb4b21",
        "outputId": "5bd3c7d3-4dca-4bf8-fe66-bdf607c776e9"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "\n",
        "plt.plot(times, max_fitness, 's-', linewidth=1, label='max(fitness)')\n",
        "plt.plot(times, min_fitness, 's-', linewidth=1, label='min(fitness)')\n",
        "plt.plot(times, average_fitness, 's-', linewidth=1, label='meann(fitness)')\n",
        "\n",
        "decorate(xlabel='step_time',\n",
        "         ylabel='fitness',\n",
        "         xlim=[0, 20], ylim=[0, 40])\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "67fb7421",
      "metadata": {
        "id": "67fb7421"
      },
      "source": [
        "### 似乎沒有很大改變，趨勢上。那試試看，如果變異機率調高呢?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "7e062634",
      "metadata": {
        "id": "7e062634"
      },
      "outputs": [],
      "source": [
        "ge=genetic_algorism(n=1000000,n_chromosomess=40,crossover_rate=0.95,mutate_rate=0.2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "edeb0535",
      "metadata": {
        "id": "edeb0535",
        "outputId": "0c498835-9277-42fd-ebf8-c016e15a08ed"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "1000000\n",
            "633890\n",
            "401062\n",
            "253908\n",
            "160664\n",
            "101658\n",
            "64320\n",
            "40796\n",
            "25910\n",
            "16404\n",
            "10402\n",
            "6606\n",
            "4192\n",
            "2646\n",
            "1648\n",
            "1064\n",
            "678\n",
            "432\n",
            "270\n",
            "164\n"
          ]
        }
      ],
      "source": [
        "times=range(0,20)\n",
        "max_fitness=[]\n",
        "min_fitness=[]\n",
        "average_fitness=[]\n",
        "for i in times:\n",
        "    ge.step()\n",
        "    print(len(ge.fitness))\n",
        "    max_fitness.append(max(ge.fitness))\n",
        "    min_fitness.append(min(ge.fitness))\n",
        "    average_fitness.append(np.mean(ge.fitness))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "93c48c4b",
      "metadata": {
        "id": "93c48c4b",
        "outputId": "0ef59bdb-e0a4-4e5c-cef2-32eb18d5289c"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "\n",
        "plt.plot(times, max_fitness, 's-', linewidth=1, label='max(fitness)')\n",
        "plt.plot(times, min_fitness, 's-', linewidth=1, label='min(fitness)')\n",
        "plt.plot(times, average_fitness, 's-', linewidth=1, label='meann(fitness)')\n",
        "\n",
        "decorate(xlabel='step_time',\n",
        "         ylabel='fitness',\n",
        "         xlim=[0, 20], ylim=[0, 40])\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "41cf241b",
      "metadata": {
        "id": "41cf241b"
      },
      "source": [
        "#### 從結果來看，可以看到一些基因演算法的特色。 \n",
        "#### 1. fitness的平均越來越高，在複雜問題上，他的確能幫助找到最佳解。\n",
        "#### 2. 同時也要注意，找到點可能為局部最佳，而非絕對最佳，從疊代上，最高值並未穩定上升。但也有可能因為fitness值標準差原本就不到，效果有限。\n",
        "#### 3. 變異如果非關鍵變異，只是調高機率反而讓模型更差\n",
        "#### 4. 解法間的同質性會越來越高，所以如果帶入到一些實際問題這也需要注意\n",
        "#### 5. 也許可以嘗試做一個基因不會減少的版本，看持續疊代的趨勢\n"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.12"
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}
